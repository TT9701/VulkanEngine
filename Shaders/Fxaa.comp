#version 460

layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 0, binding = 0) uniform sampler2D inputTexture;
layout (rgba8, set = 0, binding = 1) uniform image2D outputTexture;

#define EDGE_THRESHOLD_MIN 0.0312
#define EDGE_THRESHOLD_MAX 0.125
#define ITERATIONS 12
#define SUBPIXEL_QUALITY 0.75
#define ColorFactor 1.0

const float qualitArray[12] = float[](
    1.5, 2.0, 2.0, 2.0, 2.0, 4.0,
    8.0, 8.0, 8.0, 8.0, 8.0, 8.0
);

float QUALITY(int i) {
    return qualitArray[i];
}

float rgb2luma(vec3 rgb) {
    return sqrt(dot(rgb, vec3(0.299, 0.587, 0.114)));
}

void main() {
	ivec2 size = imageSize(outputTexture);

    vec2 texelSize = 1.0 / vec2(size.x, size.y);

    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    if (texelCoord.x >= size.x || texelCoord.y >= size.y) {
        return;
    }

    vec2 uv = vec2(texelCoord) * texelSize + vec2(0.5, 0.5) * texelSize;

    // texelSize = 1.0 / vec2(1000.0, 1000.0);

    vec3 colorCenter = texture(inputTexture, uv).xyz;
    float lumaCenter = rgb2luma(colorCenter);

    float lumaLeft = rgb2luma(textureOffset(inputTexture, uv, ivec2(-1, 0)).xyz);
    float lumaRight = rgb2luma(textureOffset(inputTexture, uv, ivec2(1, 0)).xyz);
    float lumaUp = rgb2luma(textureOffset(inputTexture, uv, ivec2(0, 1)).xyz);
    float lumaDown = rgb2luma(textureOffset(inputTexture, uv, ivec2(0, -1)).xyz);

    float lumaMin = min(lumaCenter, min(min(lumaDown, lumaUp), min(lumaLeft, lumaRight)));
    float lumaMax = max(lumaCenter, max(max(lumaDown, lumaUp), max(lumaLeft, lumaRight)));

    float lumaRange = lumaMax - lumaMin;

    vec3 fragColor;

    if (lumaRange < max(EDGE_THRESHOLD_MIN, lumaMax * EDGE_THRESHOLD_MAX)) {
        imageStore(outputTexture, texelCoord, vec4(colorCenter * ColorFactor, 1.0));
        return;
    }

    float lumaDownLeft = rgb2luma(textureOffset(inputTexture, uv, ivec2(-1, -1)).xyz);
    float lumaDownRight = rgb2luma(textureOffset(inputTexture, uv, ivec2(1, -1)).xyz);
    float lumaUpLeft = rgb2luma(textureOffset(inputTexture, uv, ivec2(-1, 1)).xyz);
    float lumaUpRight = rgb2luma(textureOffset(inputTexture, uv, ivec2(1, 1)).xyz);

    float lumaDownUp = lumaDown + lumaUp;
    float lumaLeftRight = lumaLeft + lumaRight;

    float lumaLeftCorners = lumaDownLeft + lumaUpLeft;
    float lumaDownCorners = lumaDownLeft + lumaDownRight;
    float lumaRightCorners = lumaDownRight + lumaUpRight;
    float lumaUpCorners = lumaUpRight + lumaUpLeft;

    float edgeHorizontal =
        abs(-2.0 * lumaLeft + lumaLeftCorners) +
        abs(-2.0 * lumaCenter + lumaDownUp) * 2.0 +
        abs(-2.0 * lumaRight + lumaRightCorners);
    float edgeVertical =
        abs(-2.0 * lumaUp + lumaUpCorners) +
        abs(-2.0 * lumaCenter + lumaLeftRight) * 2.0 +
        abs(-2.0 * lumaDown + lumaDownCorners);

    bool isHorizontal = (edgeHorizontal >= edgeVertical);

    float luma1 = isHorizontal ? lumaDown : lumaLeft;
    float luma2 = isHorizontal ? lumaUp : lumaRight;
    float gradient1 = luma1 - lumaCenter;
    float gradient2 = luma2 - lumaCenter;

    bool is1Steepest = abs(gradient1) >= abs(gradient2);

    float gradientScaled = 0.25 * max(abs(gradient1), abs(gradient2));

    float stepLength = isHorizontal ? texelSize.y : texelSize.x;

    float lumaLocalAverage = 0.0;

    if (is1Steepest) {
        stepLength = -stepLength;
        lumaLocalAverage = 0.5 * (luma1 + lumaCenter);
    } else {
        lumaLocalAverage = 0.5 * (luma2 + lumaCenter);
    }

    vec2 curUV = uv;
    if(isHorizontal){
        curUV.y += stepLength * 0.5;
    } else {
        curUV.x += stepLength * 0.5;
    }

    vec2 offset = isHorizontal ? vec2(texelSize.x, 0.0) : vec2(0.0, texelSize.y);
    vec2 uv1 = curUV - offset;
    vec2 uv2 = curUV + offset;

    float lumaEnd1 = rgb2luma(texture(inputTexture, uv1).xyz) - lumaLocalAverage;
    float lumaEnd2 = rgb2luma(texture(inputTexture, uv2).xyz) - lumaLocalAverage;

    bool reached1 = abs(lumaEnd1) >= gradientScaled;
    bool reached2 = abs(lumaEnd2) >= gradientScaled;
    bool reachedBoth = reached1 && reached2;

    if (!reached1){
        uv1 -= offset;
    }

    if (!reached2){
        uv2 += offset;
    }

    if (!reachedBoth){
        for (int i = 2; i < ITERATIONS; ++i) {
            if (!reached1){
                lumaEnd1 = rgb2luma(texture(inputTexture, uv1).xyz) - lumaLocalAverage;
            }
            if (!reached2){
                lumaEnd2 = rgb2luma(texture(inputTexture, uv2).xyz) - lumaLocalAverage;
            }

            reached1 = abs(lumaEnd1) >= gradientScaled;
            reached2 = abs(lumaEnd2) >= gradientScaled;
            reachedBoth = reached1 && reached2;

            if (!reached1) {
                uv1 -= offset * QUALITY(i);
            }
            if (!reached2) {
                uv2 += offset * QUALITY(i);
            }
            if (reachedBoth) {
                break;
            }
        }
    }

    float distance1 = isHorizontal ? (uv.x - uv1.x) : (uv.y - uv1.y);
    float distance2 = isHorizontal ? (uv2.x - uv.x) : (uv2.y - uv.y);

    bool isDirection1 = distance1 < distance2;
    float distanceFinal = min(distance1, distance2);

    float edgeThickness = (distance1 + distance2);

    float pixelOffset = -distanceFinal / edgeThickness + 0.5;

    bool isLumaCenterSmaller = lumaCenter < lumaLocalAverage;

    bool correctVariation = ((isDirection1 ? lumaEnd1 : lumaEnd2) < 0.0) != isLumaCenterSmaller;

    float finalOffset = correctVariation ? pixelOffset : 0.0;

    float lumaAverage = (1.0 / 12.0) * (2.0 * (lumaDownUp + lumaLeftRight) + lumaLeftCorners + lumaRightCorners);
    float subPixelOffset1 = clamp(abs(lumaAverage - lumaCenter) / lumaRange, 0.0, 1.0);
    float subPixelOffset2 = (-2.0 * subPixelOffset1 + 3.0) * subPixelOffset1 * subPixelOffset1;
    float subPixelOffsetFinal = subPixelOffset2 * subPixelOffset2 * SUBPIXEL_QUALITY;

    finalOffset = max(finalOffset, subPixelOffsetFinal);

    vec2 finalUv = uv;
    if (isHorizontal) {
        finalUv.y += finalOffset * stepLength;
    } else {
        finalUv.x += finalOffset * stepLength;
    }

    vec3 finalColor = texture(inputTexture, finalUv).xyz;

    imageStore(outputTexture, texelCoord, vec4(finalColor * ColorFactor, 1.0));
}
