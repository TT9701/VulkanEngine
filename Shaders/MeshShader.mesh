#version 460
#extension GL_EXT_mesh_shader : require
#extension GL_ARB_shading_language_include : require
#extension GL_EXT_control_flow_attributes: require

#define UNROLL_LOOP [[unroll]]

const uint MESHLET_VERTEX_ITERATIONS    = ((MAX_VERTICES   + MESH_INVOCATION_COUNT - 1) / MESH_INVOCATION_COUNT);
const uint MESHLET_PRIMITIVE_ITERATIONS = ((MAX_PRIMITIVES + MESH_INVOCATION_COUNT - 1) / MESH_INVOCATION_COUNT);

#include "Include/Structures.glsl"
#include "MeshShaderPushConstant.h"

layout (set = 0, binding = 0) uniform UBO 
{
	SceneData data;
} ubo;

struct Readback {
	uint meshlet_OutofBounds;
	uint vertex_OutofBounds;
	uint triangle_OutofBounds;
	uint material_OutofBounds;
};

layout (set = 0, binding = 1) buffer ReadbackBuffer
{
	Readback data;
} readbackBuffer;

layout(local_size_x = MESH_INVOCATION_COUNT) in;
layout(triangles, max_vertices = MAX_VERTICES, max_primitives = MAX_PRIMITIVES) out;

layout (location = 0) out vec4 OutColor[];
layout (location = 1) out vec3 OutNormal[];
layout (location = 2) out vec3 OutPos[];
layout (location = 3) out vec2 OutUV[];
layout (location = 4) out MeshIndex {
	flat uint index;
	flat uint objectID;
} OutMeshIdx[];

struct Task {
	uint baseID;
	uint drawID;
};

taskPayloadSharedEXT Task IN;

float rand(vec2 co)
{
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main()
{
	uint meshletID_InMesh = IN.baseID + gl_WorkGroupID.x;

	if (meshletID_InMesh >= constants.meshletCountBuffer.meshletCounts[IN.drawID]) {
		SetMeshOutputsEXT(0, 0);		
		return;
	}

	uint vertexOffset_PerMesh = constants.meshOffsetBuffer.meshOffsets[IN.drawID];
	uint meshletOffset_PerMesh = constants.meshletOffsetBuffer.meshletOffsets[IN.drawID];
	uint meshletTriangleOffset_PerMesh = constants.meshletTriangleOffsetBuffer.meshletTriangleOffsets[IN.drawID];

	uint meshletID = meshletOffset_PerMesh + meshletID_InMesh;

#if SHADER_VALIDITY_CHECK
	if (meshletID >= constants.statsBuffer.stats.vertexCount) {
		readbackBuffer.data.meshlet_OutofBounds = 1;
	}
#endif
	
	Meshlet meshlet = constants.meshletBuffer.meshlets[meshletID];
	uint vertCount = meshlet.vertexCount;
	uint triCount = meshlet.triangleCount;

	SetMeshOutputsEXT(vertCount, triCount);		

	mat4 mvp = ubo.data.viewproj * constants.modelMatrix;

	UNROLL_LOOP
	for (uint i = 0; i < MESHLET_VERTEX_ITERATIONS; ++i) {
		uint idx = i * MESH_INVOCATION_COUNT + gl_LocalInvocationID.x;

		if (idx >= vertCount) {
			break;
		}

		uint verticesID_InMesh =  meshlet.vertexOffset + idx;

		uint verticesID = vertexOffset_PerMesh + verticesID_InMesh;
#if SHADER_VALIDITY_CHECK
		if (verticesID >= constants.statsBuffer.stats.vertexCount) {
			readbackBuffer.data.vertex_OutofBounds = 1;
			return;
		}
#endif

		UInt16Pos encodedPos = constants.posBuffer.position[verticesID];

		BoundingBox box = constants.meshletBoundingBoxBuffer.boundingBoxes[meshletID];
		vec3 boxCenter = vec3(box.center.x, box.center.y, box.center.z);
		vec3 boxExtent = vec3(box.extent.x, box.extent.y, box.extent.z);
		vec3 boxMin = boxCenter - boxExtent;

		vec3 pos = vec3(UnpackUnorm16(encodedPos.x), UnpackUnorm16(encodedPos.y), UnpackUnorm16(encodedPos.z)) * boxExtent * 2.0 + boxMin;

		vec4 wPos = constants.modelMatrix * vec4(pos, 1.0);

		vec4 hPos = ubo.data.viewproj *  wPos;
		gl_MeshVerticesEXT[idx].gl_Position = hPos;
		OutPos[idx] = wPos.xyz;

		Norm packedNorm = constants.normBuffer.normal[verticesID];
		vec2 octNorm = vec2(UnpackSnorm16(packedNorm.x), UnpackSnorm16(packedNorm.y));
		vec3 normal = OctahedronToUnitVector(octNorm);
		OutNormal[idx] = normalize((constants.modelMatrix * vec4(normal, 0.0)).xyz);

		OutColor[idx] = vec4(rand(vec2(meshletID, IN.drawID)), rand(vec2(gl_WorkGroupID.x, IN.drawID)), rand(vec2(meshletID, IN.baseID)), 1.0);

		Tex tex = constants.texBuffer.texcoords[verticesID];
		OutUV[idx] = vec2(UnpackUnorm16(tex.x), UnpackUnorm16(tex.y));

		OutMeshIdx[idx].index = IN.drawID;
		OutMeshIdx[idx].objectID = constants.objectIndex;
	}

	UNROLL_LOOP
	for (uint i = 0; i < MESHLET_PRIMITIVE_ITERATIONS; ++i) {
		uint idx = i * MESH_INVOCATION_COUNT + gl_LocalInvocationID.x;

		if (idx >= triCount) {
			break;
		}

		uint triIdx = meshletTriangleOffset_PerMesh + meshlet.triangleOffset + idx * 3;
#if SHADER_VALIDITY_CHECK
		if (triIdx + 2 >= constants.statsBuffer.stats.triangleCount) {
			readbackBuffer.data.triangle_OutofBounds = 1;
			return;
		}
#endif

		MeshletTriangleBuffer triBuffer = constants.meshletTriangleBuffer;

		uint triID_0 = triBuffer.meshletTriangles[triIdx];
		uint triID_1 = triBuffer.meshletTriangles[triIdx + 1];
		uint triID_2 = triBuffer.meshletTriangles[triIdx + 2];

		gl_PrimitiveTriangleIndicesEXT[idx] = uvec3(triID_0, triID_1, triID_2);
	}
}